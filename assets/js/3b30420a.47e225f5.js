"use strict";(self.webpackChunk_griffel_website=self.webpackChunk_griffel_website||[]).push([[766],{6325:(e,s,t)=>{t.d(s,{Z:()=>o});var a=t(2784),n=t(2600);const r="container_Knlc";const o=function(e){return a.createElement("div",{className:r},a.createElement(n.i,null),a.createElement("span",null,e.children))}},1373:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>m,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var a=t(7896),n=t(1461),r=(t(2784),t(876)),o=(t(465),t(6325),["components"]),l={sidebar_position:2},c="mergeClasses",i={unversionedId:"react/api/merge-classes",id:"react/api/merge-classes",title:"mergeClasses",description:"There are cases where you need to merge classes from multiple useClasses calls. To merge the classes correctly, you need to use mergeClasses() function, which merges and dedupes the atomic classes generated by makeStyles().",source:"@site/docs/react/api/merge-classes.md",sourceDirName:"react/api",slug:"/react/api/merge-classes",permalink:"/react/api/merge-classes",draft:!1,editUrl:"https://github.com/microsoft/griffel/tree/main/apps/website/docs/react/api/merge-classes.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"reactSidebar",previous:{title:"makeStyles",permalink:"/react/api/make-styles"},next:{title:"shorthands",permalink:"/react/api/shorthands"}},m={},d=[{value:"Incorrect usages",id:"incorrect-usages",level:2},{value:"Never concatenate class strings",id:"never-concatenate-class-strings",level:3},{value:"Order of arguments matters",id:"order-of-arguments-matters",level:3}],p={toc:d};function u(e){var s=e.components,t=(0,n.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:s,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mergeclasses"},"mergeClasses"),(0,r.kt)("p",null,"There are cases where you need to merge classes from multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"useClasses")," calls. To merge the classes correctly, you need to use ",(0,r.kt)("inlineCode",{parentName:"p"},"mergeClasses()")," function, which merges and dedupes the atomic classes generated by ",(0,r.kt)("inlineCode",{parentName:"p"},"makeStyles()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { mergeClasses, makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  blueBold: {\n    color: 'blue',\n    fontWeight: 'bold',\n  },\n  red: {\n    color: 'red',\n  },\n});\n\nfunction Component(props) {\n  const { isBold } = props;\n  const classes = useClasses();\n\n  // \u2139\ufe0f Order of arguments determines the results\n\n  const firstClassName = mergeClasses(isBold && classes.blueBold, classes.red);\n  // \ud83d\udc46 { color: 'red', fontWeight: 'bold' }\n  const secondClassName = mergeClasses(classes.red, isBold && classes.blueBold);\n  // \ud83d\udc46 { color: 'blue', fontWeight: 'bold' }\n\n  return (\n    <>\n      <div className={firstClassName} />\n      <div className={secondClassName} />\n    </>\n  );\n}\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Compared to native CSS order of arguments in ",(0,r.kt)("inlineCode",{parentName:"p"},"mergeClasses()")," determines the results. This lets you control styles with JavaScript.")),(0,r.kt)("h2",{id:"incorrect-usages"},"Incorrect usages"),(0,r.kt)("p",null,"This section shows and describes anti-patterns which should never be used."),(0,r.kt)("h3",{id:"never-concatenate-class-strings"},"Never concatenate class strings"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"It is not possible to simply concatenate classes returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"useClasses()")," hooks. Always use ",(0,r.kt)("inlineCode",{parentName:"p"},"mergeClasses()")," to merge classes as results of concatenation can contain duplicated classes and lead to non-deterministic results.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const useClasses = makeStyles({\n  rootA: { color: 'red' },\n  rootB: { color: 'blue' },\n});\n\nfunction App(props) {\n  const classes = useClasses();\n\n  // \u2705 Returns \"class-color-blue\"\n  const correctClasses = mergeClasses(classes.rootA, classes.rootB);\n  // \ud83d\udd34 Never concatenate class strings, returns \"class-color-red class-color-blue\"\n  const wrongClasses = classes.rootA + ' ' + classes.rootB;\n}\n")),(0,r.kt)("h3",{id:"order-of-arguments-matters"},"Order of arguments matters"),(0,r.kt)("p",null,"The order of classes is important - if two classes apply the same style, the latest class wins. In the example below the background color will be red:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const useClasses = makeStyles({\n  root: { color: 'red' },\n});\n\nfunction Component(props) {\n  const classes = useClasses();\n  // \ud83d\udca5 Incorrect order of classes\n  const wrongClasses2 = mergeClasses(props.className, classes.root);\n}\n")))}u.isMDXComponent=!0}}]);