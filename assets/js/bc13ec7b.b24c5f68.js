"use strict";(self.webpackChunk_griffel_website=self.webpackChunk_griffel_website||[]).push([[998],{4346:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>f,frontMatter:()=>r,metadata:()=>d,toc:()=>m});var a=n(7896),i=n(1461),o=(n(2784),n(876)),s=n(465),l=["components"],r={sidebar_position:4},p="Technical details",d={unversionedId:"react/ahead-of-time-compilation/technical-details",id:"react/ahead-of-time-compilation/technical-details",title:"Technical details",description:"What is being optimized with AOT (Ahead Of Time) compilation?",source:"@site/docs/react/ahead-of-time-compilation/technical-details.md",sourceDirName:"react/ahead-of-time-compilation",slug:"/react/ahead-of-time-compilation/technical-details",permalink:"/react/ahead-of-time-compilation/technical-details",draft:!1,editUrl:"https://github.com/microsoft/griffel/tree/main/apps/website/docs/react/ahead-of-time-compilation/technical-details.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"reactSidebar",previous:{title:"With Babel",permalink:"/react/ahead-of-time-compilation/with-babel"},next:{title:"Introduction",permalink:"/react/css-extraction/introduction"}},c={},m=[{value:"What is being optimized with AOT (Ahead Of Time) compilation?",id:"what-is-being-optimized-with-aot-ahead-of-time-compilation",level:2},{value:"Module evaluation process",id:"module-evaluation-process",level:2}],h={toc:m};function f(e){var t=e.components,n=(0,i.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"technical-details"},"Technical details"),(0,o.kt)("h2",{id:"what-is-being-optimized-with-aot-ahead-of-time-compilation"},"What is being optimized with AOT (Ahead Of Time) compilation?"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Style resolution only needs to happen on the initial render of a component. Therefore, without build time optimization the performance is comparable with the 2nd and consecutive renders."),(0,o.kt)("p",{parentName:"admonition"},"It is reasonable to introduce build time optimization if/when it is required.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { makeStyles } from '@griffel/react';\n\n// 1. Invocation of makeStyles creates a styling hook that will be used inside a component.\nconst useStyles = makeStyles({\n  root: { paddingLeft: '1px', display: 'flex' },\n});\n\nfunction Component() {\n  // 2. The hook call resolves styles which are injected into the document.\n  const classes = useStyles();\n\n  return <div className={classes.root} />;\n}\n")),(0,o.kt)("p",null,"You can look at the graph below which describes what work is done during style resolution:"),(0,o.kt)(s.G,{config:"{}",chart:"stateDiagram-v2\n    direction LR\n\n    INVOKE_USE_STYLES: useStyles() invocation\n    COMPUTE_RTL_STYLES: Compute RTL styles\n    COMPUTE_CSS_CLASSES: Compute CSS classes\n    COMPUTE_CSS_RULES: Compute CSS rules\n    INSERT_TO_DOM: Insert to DOM\n\n    INVOKE_USE_STYLES --\x3e COMPUTE_RTL_STYLES\n    COMPUTE_RTL_STYLES --\x3e COMPUTE_CSS_CLASSES\n    COMPUTE_CSS_CLASSES --\x3e COMPUTE_CSS_RULES\n    COMPUTE_CSS_RULES --\x3e INSERT_TO_DOM\n\n    note right of INVOKE_USE_STYLES\n     {\n        &nbsp;&nbsp;paddingLeft: '1px',\n        &nbsp;&nbsp;display: 'flex'\n     }\n    end note\n    note right of COMPUTE_RTL_STYLES\n     {\n        &nbsp;&nbsp;paddingLeft: '1px',\n        &nbsp;&nbsp;paddingRight: '1px',\n        &nbsp;&nbsp;display: 'flex'\n      }\n    end note\n    note right of COMPUTE_CSS_CLASSES\n     {\n       &nbsp;&nbsp;paddingLeft: '1px', // .f10xn8zz\n       &nbsp;&nbsp;paddingRight: '1px', // .f136y8j8\n       &nbsp;&nbsp;display: 'flex' // .f22iagw\n     }\n    end note\n    note right of COMPUTE_CSS_RULES\n     .f10xn8zz { padding-left: 1px }\n     .f136y8j8 { padding-right: 1px }\n     .f22iagw { display: flex }\n    end note",mdxType:"Mermaid"}),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"This work only happens once, during first render.")),(0,o.kt)("p",null,"The final result before the CSS rules are inserted into DOM can be compiled ahead of time during build time through the methods described above.\nOnce the styles of our simple example are transformed at build time the resulting bundle contains a result similar to what is in our diagram."),(0,o.kt)("p",null,"The actual runtime code of ",(0,o.kt)("inlineCode",{parentName:"p"},"makeStyles")," is completely stripped from the bundle and replaced with a lightweight function (",(0,o.kt)("inlineCode",{parentName:"p"},"__styles"),") that simply concatenates the CSS classes and inserts them to DOM."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const useStyles = __styles(\n  {\n    root: {\n      mc9l5x: 'f22iagw',\n      uwmqm3: ['f10xn8zz', 'f136y8j8'],\n    },\n  },\n  {\n    d: ['.f22iagw{display:flex;}', '.f10xn8zz{padding-left:1px;}', '.f136y8j8{padding-right:1px;}'],\n  },\n);\n\nfunction Component() {\n  const classes = useStyles();\n\n  return <div className={classes.root} />;\n}\n")),(0,o.kt)("h2",{id:"module-evaluation-process"},"Module evaluation process"),(0,o.kt)("p",null,"Let's consider the following scenario:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// constants.js\nexport const PADDING_TOKEN = '1px';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// common.js\nexport const commonStyles = () => ({\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n});\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// styles.js\nimport { makeStyles } from '@griffel/react';\nimport { PADDING_TOKEN } from './constants';\nimport { commonStyles } from './common';\n\nconst useStyles = makeStyles({\n  root: { paddingLeft: PADDING_TOKEN, ...commonStyles() },\n});\n")),(0,o.kt)("p",null,"It's perfectly fine, and even recommended to reuse common tokens and create style helpers across an application.\nIt's one of the main benefits of using CSS-in-JS."),(0,o.kt)("p",null,"However, this means that the build time transforms which are described above are not trivial to compute because code needs to be evaluated to know what styles to transform.\nIn the example above, in order to transform the ",(0,o.kt)("inlineCode",{parentName:"p"},"styles.js")," file, the code needs to be executed/evaluated by importing the extra modules that it depends on (",(0,o.kt)("inlineCode",{parentName:"p"},"constants.js")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"common.js"),")."),(0,o.kt)("p",null,"Griffel uses style evaluation from ",(0,o.kt)("a",{parentName:"p",href:"https://linaria.dev/"},"Linaria"),".\nThe build-time evaluation happens as a part of the Babel transforms in Griffel. All styles that require evaluation will be batched and done in single evaluation context.\nLinaria's Babel config is separate to any config used by the application.\nTherefore, additional language features may require ",(0,o.kt)("a",{parentName:"p",href:"/react/ahead-of-time-compilation/with-babel#configuration"},"extra configuration"),"."))}f.isMDXComponent=!0}}]);