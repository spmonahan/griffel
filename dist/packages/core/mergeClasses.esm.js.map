{"version":3,"file":"mergeClasses.esm.js","sources":["../../../packages/core/src/mergeClasses.ts"],"sourcesContent":["import {\n  DEFINITION_LOOKUP_TABLE,\n  LOOKUP_DEFINITIONS_INDEX,\n  LOOKUP_DIR_INDEX,\n  SEQUENCE_PREFIX,\n  SEQUENCE_SIZE,\n} from './constants';\nimport { hashSequence } from './runtime/utils/hashSequence';\nimport { reduceToClassName } from './runtime/reduceToClassNameForSlots';\nimport { CSSClassesMap, SequenceHash } from './types';\n\n// Contains a mapping of previously resolved sequences of atomic classnames\nexport const mergeClassesCachedResults: Record<string, string> = {};\n\n/**\n * Function can take any number of arguments, joins classes together and deduplicates atomic declarations generated by\n * `makeStyles()`. Handles scoped directional styles.\n *\n * Classnames can be of any length, this function can take both atomic declarations and class names.\n *\n * Input:\n * ```\n * // not real classes\n * mergeClasses('ui-button', 'displayflex', 'displaygrid')\n * ```\n *\n * Output:\n * ```\n * 'ui-button displaygrid'\n * ```\n */\nexport function mergeClasses(...classNames: (string | false | undefined)[]): string;\n\nexport function mergeClasses(): string {\n  // arguments are parsed manually to avoid double loops as TS & Babel transforms rest via an additional loop\n  // @see https://babeljs.io/docs/en/babel-plugin-transform-parameters\n  /* eslint-disable prefer-rest-params */\n\n  let dir: 'ltr' | 'rtl' | null = null;\n  let resultClassName = '';\n\n  // Is used as a cache key to avoid object merging\n  let sequenceMatch = '';\n  const sequencesIds: (SequenceHash | undefined)[] = new Array(arguments.length);\n\n  for (let i = 0; i < arguments.length; i++) {\n    const className = arguments[i];\n\n    if (typeof className === 'string' && className !== '') {\n      // All classes generated by `makeStyles()` are prefixed by a sequence hash, this allows to identify class sets\n      // without parsing each className in a string\n      const sequenceIndex = className.indexOf(SEQUENCE_PREFIX);\n\n      if (sequenceIndex === -1) {\n        resultClassName += className + ' ';\n      } else {\n        const sequenceId = className.substr(sequenceIndex, SEQUENCE_SIZE);\n\n        // Handles a case with mixed classnames, i.e. \"ui-button ATOMIC_CLASSES\"\n        if (sequenceIndex > 0) {\n          resultClassName += className.slice(0, sequenceIndex);\n        }\n\n        sequenceMatch += sequenceId;\n        sequencesIds[i] = sequenceId;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (className.indexOf(SEQUENCE_PREFIX, sequenceIndex + 1) !== -1) {\n          // eslint-disable-next-line no-console\n          console.error(\n            'mergeClasses(): a passed string contains multiple identifiers of atomic classes (classes that start ' +\n              `with \"${SEQUENCE_PREFIX}\"), it's possible that passed classes were concatenated in a wrong way. ` +\n              `Source string: ${className}`,\n          );\n        }\n      }\n    }\n  }\n\n  // .slice() there allows to avoid trailing space for non-atomic classes\n  // \"ui-button ui-flex \" => \"ui-button ui-flex\"\n  if (sequenceMatch === '') {\n    return resultClassName.slice(0, -1);\n  }\n\n  // It's safe to reuse results to avoid continuous merging as results are stable\n  // \"__seq1 ... __seq2 ...\" => \"__seq12 ...\"\n  const mergeClassesResult = mergeClassesCachedResults[sequenceMatch];\n\n  if (mergeClassesResult !== undefined) {\n    return resultClassName + mergeClassesResult;\n  }\n\n  const sequenceMappings: CSSClassesMap[] = [];\n\n  for (let i = 0; i < arguments.length; i++) {\n    const sequenceId = sequencesIds[i];\n\n    if (sequenceId) {\n      const sequenceMapping = DEFINITION_LOOKUP_TABLE[sequenceId];\n\n      if (sequenceMapping) {\n        sequenceMappings.push(sequenceMapping[LOOKUP_DEFINITIONS_INDEX]);\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (dir !== null && dir !== sequenceMapping[LOOKUP_DIR_INDEX]) {\n            // eslint-disable-next-line no-console\n            console.error(\n              `mergeClasses(): a passed string contains an identifier (${sequenceId}) that has different direction ` +\n                `(dir=\"${sequenceMapping[1] ? 'rtl' : 'ltr'}\") setting than other classes. This is not supported. ` +\n                `Source string: ${arguments[i]}`,\n            );\n          }\n        }\n\n        dir = sequenceMapping[LOOKUP_DIR_INDEX];\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          // eslint-disable-next-line no-console\n          console.error(\n            `mergeClasses(): a passed string contains an identifier (${sequenceId}) that does not match any entry ` +\n              `in cache. Source string: ${arguments[i]}`,\n          );\n        }\n      }\n    }\n  }\n\n  // eslint-disable-next-line prefer-spread\n  const resultDefinitions = Object.assign.apply<ObjectConstructor, CSSClassesMap[], CSSClassesMap>(\n    Object,\n    // .assign() mutates the first object, we can't mutate mappings as it will produce invalid results later\n    [{}].concat(sequenceMappings),\n  );\n\n  let atomicClassNames = reduceToClassName(resultDefinitions, dir!);\n\n  // Each merge of classes generates a new sequence of atomic classes that needs to be registered\n  const newSequenceHash = hashSequence(atomicClassNames, dir!, sequencesIds);\n  atomicClassNames = newSequenceHash + ' ' + atomicClassNames;\n\n  mergeClassesCachedResults[sequenceMatch] = atomicClassNames;\n  DEFINITION_LOOKUP_TABLE[newSequenceHash] = [resultDefinitions, dir!];\n\n  return resultClassName + atomicClassNames;\n}\n"],"names":["mergeClassesCachedResults","mergeClasses","dir","resultClassName","sequenceMatch","sequencesIds","Array","arguments","length","i","className","sequenceIndex","indexOf","SEQUENCE_PREFIX","sequenceId","substr","SEQUENCE_SIZE","slice","process","env","NODE_ENV","console","error","mergeClassesResult","undefined","sequenceMappings","sequenceMapping","DEFINITION_LOOKUP_TABLE","push","LOOKUP_DEFINITIONS_INDEX","LOOKUP_DIR_INDEX","resultDefinitions","Object","assign","apply","concat","atomicClassNames","reduceToClassName","newSequenceHash","hashSequence"],"mappings":"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"}